COMPILER Marbles
 
// Add auxiliary global methods and declarations here, if any.
 
CHARACTERS
digit = "0123456789".            /* the set of all digits */
letter = 'A' .. 'Z' + 'a'..'z'.  /* the set of all upper and lower case letters */
eol = '\r'. /* the end-of-line character */
charInLine = ANY - '\r' - '\n'. /* the set of characters considered to be in-line */
anyButDoubleQuote = charInLine - '\"'. /* All characters except the double quote character */
 
TOKENS
// These are terminal values
id = (letter | '_') {letter | digit | '_'}.
true = "TRUE". /* A boolean true */
false = "FALSE". /* A boolean false */
const_i = digit {digit}. /* An int constant */
const_s = '"' {anyButDoubleQuote | "\\\""} '"'. /* A string constant */
 
PRAGMAS
// Add pragma declarations here.
 
// Set the ignored characters (whitespaces) here, the blank character (' ')
// is ignored by default.
IGNORE '\t' + '\r' + '\n'
 
PRODUCTIONS
// The entry point is the name of the grammar
 
Marbles             = PROGRAM.
PROGRAM             = {CREATE_VAR | CREATE_ASSET | ASSIGNMENT ';'} {CREATE_FUNCTION} "empty" "instructions" '{' {INSTRUCTION | RETURN} '}' .
CREATE_FUNCTION     = "function" TYPE_FUNC id '(' [TYPE_VAR id {',' TYPE_VAR id}] ')' '{' {CREATE_VAR} {INSTRUCTION} '}' .
TYPE_FUNC           = "text" | "number" | "bool" | "empty" .
CREATE_VAR          = "var" TYPE_VAR id ';' .
CREATE_ASSET        = "asset" id ';' .
TYPE_VAR            = "text" | "number" | "bool" .
CALL_TO_FUNCTION    = "call" id '(' [EXP {',' EXP}] ')'.
INSTRUCTION         = ((STOP | DO | ASSIGNMENT) ';' |  (FOR | WHILE | IFF)) .
STOP                = "stop".
DO                  = "do" id '.' ACTION .
ACTION              = ((("move_x" '(' | "move_y" '(' | "turn" '(' | "set_position" '(' EXP ',' ) EXP ')' ) | "spin").
FOR                 = "for" '(' CREATE_VAR ASSIGNMENT ';' id '<' EXP ';' ASSIGNMENT ')' '{' {INSTRUCTION} '}' .
WHILE               = "while" '(' SUPER_EXP ')' '{' {INSTRUCTION} '}' .
IFF                 = "if" '(' SUPER_EXP ')' '{' {INSTRUCTION} '}' .
ASSIGNMENT          = "set" (id ['.' ATTRIBUTE]) '=' (SUPER_EXP | COLOR) .
SUPER_EXP           = EXP_L {"or" EXP_L} .
EXP_L               = EXP_R {"and" EXP_R} .
EXP_R               = EXP [OP EXP] .
EXP                 = TERM {('+' | '-') TERM} .
TERM                = FACTOR {('*' | '/') FACTOR} .
FACTOR              = '(' EXP_R ')' | ['-'] (const_i | id ['.' ATTRIBUTE] | CALL_TO_FUNCTION | BOOL | const_s) .
OP                  = '>' | '<' | "==" | "<=" | ">=" | "!=".
BOOL                = true | false.
ATTRIBUTE           = "color" | "size" | "value" | "text" | "length" | "type" | "position_x" | "position_y" | "rotation" | 						  "font_size" | "width" | "height".
COLOR               = "blue" | "yellow" | "green" | "red" | "purple" | "orange" .
RETURN              = "return" SUPER_EXP .
 
// End of the compiler specification
END Marbles.